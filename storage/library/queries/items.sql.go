// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: items.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (location_id, code, code_type, code_source,
                   title, title_translated, title_transliterated)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateItemParams struct {
	LocationID          int64
	Code                string
	CodeType            string
	CodeSource          string
	Title               string
	TitleTranslated     sql.NullString
	TitleTransliterated sql.NullString
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.LocationID,
		arg.Code,
		arg.CodeType,
		arg.CodeSource,
		arg.Title,
		arg.TitleTranslated,
		arg.TitleTransliterated,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getItem = `-- name: GetItem :one
SELECT id, code, code_type, code_source,
       title, title_translated, title_transliterated,
       created_at, updated_at
FROM items
WHERE id=?
`

type GetItemRow struct {
	ID                  int64
	Code                string
	CodeType            string
	CodeSource          string
	Title               string
	TitleTranslated     sql.NullString
	TitleTransliterated sql.NullString
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

func (q *Queries) GetItem(ctx context.Context, id int64) (GetItemRow, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i GetItemRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.CodeType,
		&i.CodeSource,
		&i.Title,
		&i.TitleTranslated,
		&i.TitleTransliterated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, location_id, code, code_type, code_source,
       title, title_translated, title_transliterated,
       created_at, updated_at
FROM items
WHERE code_type = ? AND code IN (/*SLICE:codes*/?)
`

type GetItemsParams struct {
	CodeType string
	Codes    []string
}

type GetItemsRow struct {
	ID                  int64
	LocationID          int64
	Code                string
	CodeType            string
	CodeSource          string
	Title               string
	TitleTranslated     sql.NullString
	TitleTransliterated sql.NullString
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

func (q *Queries) GetItems(ctx context.Context, arg GetItemsParams) ([]GetItemsRow, error) {
	query := getItems
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CodeType)
	if len(arg.Codes) > 0 {
		for _, v := range arg.Codes {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:codes*/?", strings.Repeat(",?", len(arg.Codes))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:codes*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsRow
	for rows.Next() {
		var i GetItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.Code,
			&i.CodeType,
			&i.CodeSource,
			&i.Title,
			&i.TitleTranslated,
			&i.TitleTransliterated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllItems = `-- name: ListAllItems :many
SELECT id, code, code_type, code_source,
       title, title_translated, title_transliterated,
       created_at, updated_at
FROM items
`

type ListAllItemsRow struct {
	ID                  int64
	Code                string
	CodeType            string
	CodeSource          string
	Title               string
	TitleTranslated     sql.NullString
	TitleTransliterated sql.NullString
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

func (q *Queries) ListAllItems(ctx context.Context) ([]ListAllItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllItemsRow
	for rows.Next() {
		var i ListAllItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.CodeType,
			&i.CodeSource,
			&i.Title,
			&i.TitleTranslated,
			&i.TitleTransliterated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsForLocation = `-- name: ListItemsForLocation :many
SELECT id, code, code_type, code_source,
       title, title_translated, title_transliterated,
       created_at, updated_at
FROM items
WHERE location_id=?
`

type ListItemsForLocationRow struct {
	ID                  int64
	Code                string
	CodeType            string
	CodeSource          string
	Title               string
	TitleTranslated     sql.NullString
	TitleTransliterated sql.NullString
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

func (q *Queries) ListItemsForLocation(ctx context.Context, locationID int64) ([]ListItemsForLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, listItemsForLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsForLocationRow
	for rows.Next() {
		var i ListItemsForLocationRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.CodeType,
			&i.CodeSource,
			&i.Title,
			&i.TitleTranslated,
			&i.TitleTransliterated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveItem = `-- name: MoveItem :exec
UPDATE items SET location_id = ? WHERE id = ? LIMIT 1
`

type MoveItemParams struct {
	LocationID int64
	ID         int64
}

func (q *Queries) MoveItem(ctx context.Context, arg MoveItemParams) error {
	_, err := q.db.ExecContext(ctx, moveItem, arg.LocationID, arg.ID)
	return err
}
