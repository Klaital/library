// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: locations.sql

package queries

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, notes) VALUES (?, ?) RETURNING id
`

type CreateLocationParams struct {
	Name  string
	Notes sql.NullString
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Name, arg.Notes)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const describeLocation = `-- name: DescribeLocation :one
SELECT name, notes FROM locations WHERE id=?
`

type DescribeLocationRow struct {
	Name  string
	Notes sql.NullString
}

func (q *Queries) DescribeLocation(ctx context.Context, id int64) (DescribeLocationRow, error) {
	row := q.db.QueryRowContext(ctx, describeLocation, id)
	var i DescribeLocationRow
	err := row.Scan(&i.Name, &i.Notes)
	return i, err
}

const destroyLocation = `-- name: DestroyLocation :exec
DELETE FROM locations WHERE id=?
`

func (q *Queries) DestroyLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, destroyLocation, id)
	return err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, notes FROM locations
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name, &i.Notes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE locations SET name=?, notes=? WHERE id=?
`

type UpdateLocationParams struct {
	Name  string
	Notes sql.NullString
	ID    int64
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLocation, arg.Name, arg.Notes, arg.ID)
	return err
}

const updateLocationName = `-- name: UpdateLocationName :exec
UPDATE locations SET name=? WHERE id=?
`

type UpdateLocationNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateLocationName(ctx context.Context, arg UpdateLocationNameParams) error {
	_, err := q.db.ExecContext(ctx, updateLocationName, arg.Name, arg.ID)
	return err
}

const updateLocationNotes = `-- name: UpdateLocationNotes :exec
UPDATE locations SET notes=? WHERE id=?
`

type UpdateLocationNotesParams struct {
	Notes sql.NullString
	ID    int64
}

func (q *Queries) UpdateLocationNotes(ctx context.Context, arg UpdateLocationNotesParams) error {
	_, err := q.db.ExecContext(ctx, updateLocationNotes, arg.Notes, arg.ID)
	return err
}
